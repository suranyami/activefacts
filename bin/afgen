#! /usr/bin/env ruby
#
#       ActiveFacts: Read a Vocabulary (from a NORMA, CQL or other file) and run a generator
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
$:.unshift File.dirname(File.expand_path(__FILE__))+"/../lib"

require 'rubygems'

require 'activefacts'
require 'activefacts/vocabulary'

module ActiveFacts::Generate; end
module ActiveFacts::Generate::Helpers; end
module ActiveFacts::Generate::Transform; end

# Load the generators and transforms:
generators = []
transforms = []
base_generators = ActiveFacts::Generate.constants
base_transforms = ActiveFacts::Generate::Transform.constants
arg = ARGV.shift || "--help"
while arg =~ /^--([^=]*)(?:=(.*))?/
  begin
    require "activefacts/generate/#{$1}"
    new_generators = ActiveFacts::Generate.constants
    new_transforms = ActiveFacts::Generate::Transform.constants
    options = ($2||"").split(/,/)
    generators += (new_generators-base_generators).map do |generator|
      [ generator, options ]
    end
    transforms += (new_transforms-base_transforms).map do |transform|
      [ transform, options ]
    end
    base_generators = new_generators
    base_transforms = new_transforms
  rescue LoadError => e
    $stderr.puts "Could not find output module #{$1}. Try --help"
    exit 1
  end

  arg = ARGV.shift
end

# Load the file type input method
if arg
  arg, *options = *arg.split(/=/)
  extension = arg.sub(/\A.*\./,'').downcase
  input_handler = "activefacts/input/#{extension}"
  require input_handler

  input_class = extension.upcase
  input_klass = ActiveFacts::Input.const_get(input_class.to_sym)
  raise "Expected #{input_handler} to define #{input_class}" unless input_klass
end

# Read the input file:
begin
  if input_klass
    vocabulary = input_klass.readfile(arg, *options)
  else
    vocabulary = true
  end

  exit 0 unless vocabulary

  # Apply the transforms
  transforms.each do |transform, options|
    eval("ActiveFacts::Generate::Transform::#{transform}").new(vocabulary, *options).transform
  end

  # Generate the output:
  generators.each do |generator, options|
    eval("ActiveFacts::Generate::#{generator}").new(vocabulary, *options).generate
  end
rescue => e
  $stderr.puts "#{e.message}"
  # puts "\t#{e.backtrace*"\n\t"}"
  $stderr.puts "\t#{e.backtrace*"\n\t"}" if debug :exception
  exit 1
end
